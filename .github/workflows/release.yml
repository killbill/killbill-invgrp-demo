name: release

on:
  workflow_dispatch:
    inputs:
      parent_version:
        description: 'New killbill-oss-parent version'
        required: false
        default: ''
      perform_version:
        description: 'tag to (re-)perform (in case of release:perform failure)'
        required: false
        default: ''
  

env:
  MAVEN_FLAGS: "-B --no-transfer-progress"
  MAVEN_OPTS: "-Xmx2G -XX:+ExitOnOutOfMemoryError -Dmaven.wagon.rto=60000 -Dmaven.wagon.httpconnectionManager.ttlSeconds=25 -Dmaven.wagon.http.retryHandler.count=3"
  MAVEN_VERSION: 3.8.4
  MAVEN_ARGS: "-Dmaven.test.redirectTestOutputToFile=true -Dcheck.skip-dependency=true -Dcheck.skip-dependency-scope=true -Dcheck.skip-dependency-versions=true -Dcheck.skip-duplicate-finder=true -Dcheck.skip-enforcer=true -Dcheck.skip-rat=true -Dcheck.skip-spotbugs=true -DskipTests=true"
  MAVEN_GOAL: "clean package"
  KB_ADDRESS: 127.0.0.1
  KB_PORT: 8080
  PLUGIN_NAME: invgrp

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        if: github.event.inputs.perform_version == ''
        uses: actions/checkout@v2
      - name: Checkout full repository
        # Required when performing an existing release.
        if: github.event.inputs.perform_version != ''
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Setup git user
        env:
          BUILD_USER: ${{ secrets.BUILD_USER }}
          BUILD_TOKEN: ${{ secrets.BUILD_TOKEN }}
        run: |
          git config --global user.email "contact@killbill.io"
          git config --global user.name "Kill Bill core team"
          git config --global url."https://${BUILD_USER}:${BUILD_TOKEN}@github.com/".insteadOf "git@github.com:"
      - name: Configure Java
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Configure Sonatype mirror
        uses: s4u/maven-settings-action@v2.3.0
        # Go to Sonatype directly to avoid delay syncs (could get rid of this if actions/setup-java were to support mirrors).
        with:
          mirrors: '[{"id": "oss-releases", "name": "Sonatype releases", "mirrorOf": "*", "url": "https://oss.sonatype.org/content/repositories/releases/"}]'
      - name: Download Java dependencies
        # We do as much as we can, but it may not be enough (https://issues.apache.org/jira/browse/MDEP-82)
        run: |
          mvn ${MAVEN_FLAGS} clean install dependency:resolve dependency:resolve-plugins -DskipTests=true -Dgpg.skip=true -Psonatype-oss-release
      - name: Update killbill-oss-parent
        if: github.event.inputs.parent_version != ''
        run: |
          echo "Updating killbill-oss-parent pom.xml to ${{ github.event.inputs.parent_version }}:"
          mvn ${MAVEN_FLAGS} versions:update-parent -DgenerateBackupPoms=false -DparentVersion="[${{ github.event.inputs.parent_version }}]"
          echo "killbill-oss-parent pom.xml changes:"
          git --no-pager diff
          echo "Downloading new dependencies:"
          mvn ${MAVEN_FLAGS} -U clean install -DskipTests=true

          git add pom.xml
          # Will be pushed as part of the release process, only if the release is successful
          git commit -m "pom.xml: update killbill-oss-parent to ${{ github.event.inputs.parent_version }}"
      - name: Configure settings.xml for release
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: ossrh-releases
          server-username: OSSRH_USER
          server-password: OSSRH_PASS
          gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }}
          gpg-passphrase: GPG_PASSPHRASE
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6.0
          rubygems: latest
          bundler-cache: true
      - name: Install kpm
        run: |
          gem install kpm
      - name: Set up Maven
        run: mvn --errors --batch-mode --show-version wrapper:wrapper "-Dmaven=${MAVEN_VERSION}"
      - name: Build plugin
        run: |
          ./mvnw --errors --batch-mode --show-version ${MAVEN_ARGS} ${MAVEN_GOAL}
      - name: Install plugin
        run: |
          kpm install_java_plugin ${PLUGIN_NAME} --from-source-file target/${PLUGIN_NAME}-plugin-*-SNAPSHOT.jar --destination /var/tmp/bundles          
      - name: Start stack
        run: |
          mkdir -p /var/tmp/tomcat_logs
          chmod ugo+rwx /var/tmp/tomcat_logs
          cd docker
          docker-compose -p it -f docker-compose.ci.mysql.yml up --no-start
          docker start it_db_1
      - name: Wait for MySQL
        run: |
          set +e
          count=0
          until mysqladmin ping -h 127.0.0.1 -u root --password=root --silent; do
            if [[ "$count" == "25" ]]; then
              exit 1
            fi
            (( count++ ))
            printf '.'
            sleep 5
          done
          set -e
      - name: Start Kill Bill
        # Sometimes it gets stuck (if Kill Bill starts when the DB isn't ready?)
        timeout-minutes: 4
        run: |
          # Start all remaining containers
          cd docker
          docker-compose -p it -f docker-compose.ci.mysql.yml up -d
          count=0
          until $(curl --connect-timeout 10 --max-time 30 --output /dev/null --silent --fail http://${KB_ADDRESS}:${KB_PORT}/1.0/healthcheck); do
            if [[ "$count" == "180" ]]; then
              exit 64
            fi
            count=$(( count + 1 ))
            sleep 1
          done
          curl --connect-timeout 10 --max-time 30 -v \
               -X POST \
               -u admin:password \
               -H 'Content-Type: application/json' \
               -H 'X-Killbill-CreatedBy: GitHub' \
               -d '{"apiKey": "bob", "apiSecret": "lazar"}' \
               "http://${KB_ADDRESS}:${KB_PORT}/1.0/kb/tenants"
      - name: Release artifacts
        if: github.event.inputs.perform_version == ''
        env:
          OSSRH_USER: ${{ secrets.OSSRH_USER }}
          OSSRH_PASS: ${{ secrets.OSSRH_PASS }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        # It will still check the remote but hopefully not download much (0 B at 0 B/s). -o isn't safe because of MDEP-82 (see above).
        run: |
          mvn ${MAVEN_FLAGS} release:clean release:prepare release:perform
      - name: Perform release
        if: github.event.inputs.perform_version != ''
        env:
          OSSRH_USER: ${{ secrets.OSSRH_USER }}
          OSSRH_PASS: ${{ secrets.OSSRH_PASS }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        # It will still check the remote but hopefully not download much (0 B at 0 B/s). -o isn't safe because of MDEP-82 (see above).
        # See https://issues.apache.org/jira/browse/SCM-729 for why the release.properties file is required.
        run: |
          echo "scm.url=scm\:git\:git@github.com\:${GITHUB_REPOSITORY}.git" > release.properties
          echo "scm.tag=${{ github.event.inputs.perform_version }}" >> release.properties
          mvn ${MAVEN_FLAGS} release:perform
      - name: Debugging after failure
        if: failure()
        run: |
          echo "::group::killbill healthcheck"
          curl --connect-timeout 10 --max-time 30 -v http://${KB_ADDRESS}:${KB_PORT}/1.0/healthcheck || true
          echo "::endgroup::"
          echo "::group::hostname"
          hostname
          echo "::endgroup::"
          echo "::group::netstat -tulpn"
          sudo netstat -tulpn
          echo "::endgroup::"
          echo "::group::docker network ls"
          docker network ls
          echo "::endgroup::"
          echo "::group::docker ps -a"
          docker ps -a
          echo "::endgroup::"
          echo "::group::killbill env"
          docker exec it_killbill_1 env || true
          echo "::endgroup::"
          echo "::group::db env"
          docker exec it_db_1 env || true
          echo "::endgroup::"
          echo "::group::killbill logs"
          docker logs -t --details it_killbill_1 || true
          # To avoid EACCES errors for the upload
          docker stop it_killbill_1 || true
          sudo chmod -R ugo+rwx /var/tmp/tomcat_logs
          echo "::endgroup::"
          echo "::group::db logs"
          docker logs -t --details it_db_1 || true
          docker stop it_db_1 || true
          echo "::endgroup::"
      - name: Upload logs on failure
        uses: actions/upload-artifact@v3.1.1
        if: failure()
        with:
          name: failure-tomcat_logs-${{ matrix.database-adapter }}
          path: /var/tmp/tomcat_logs
          retention-days: 3